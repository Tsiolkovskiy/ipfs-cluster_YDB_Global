version: '3.8'

services:
  # YDB Database
  ydb:
    image: cr.yandex/yc/yandex-docker-local-ydb:latest
    platform: linux/amd64
    hostname: localhost
    container_name: gdc-ydb
    environment:
      - YDB_DEFAULT_LOG_LEVEL=NOTICE
      - GRPC_TLS_PORT=2135
      - GRPC_PORT=2136
      - MON_PORT=8765
    ports:
      - "2135:2135"   # gRPC TLS
      - "2136:2136"   # gRPC
      - "8765:8765"   # Web UI
    volumes:
      - ydb_data:/ydb_data
      - ydb_logs:/ydb_logs
    networks:
      - gdc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8765/monitoring/selfcheck"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # NATS JetStream
  nats:
    image: nats:2.10-alpine
    container_name: gdc-nats
    command: 
      - "--jetstream"
      - "--store_dir=/data"
      - "--max_file_store=1GB"
      - "--max_mem_store=256MB"
      - "--http_port=8222"
    ports:
      - "4222:4222"   # NATS
      - "8222:8222"   # HTTP monitoring
    volumes:
      - nats_data:/data
    networks:
      - gdc-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: gdc-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - gdc-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana
  grafana:
    image: grafana/grafana:10.1.0
    container_name: gdc-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana:/etc/grafana/provisioning:ro
    networks:
      - gdc-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: gdc-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Web UI
      - "14268:14268"  # HTTP collector
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    networks:
      - gdc-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: gdc-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gdc-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # GDC Application (for development)
  gdc:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: gdc-app
    environment:
      - GDC_DATABASE_ENDPOINT=grpc://ydb:2136
      - GDC_EVENTBUS_URL=nats://nats:4222
      - GDC_TELEMETRY_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - GDC_LOGGING_LEVEL=debug
    ports:
      - "8080:8080"   # HTTP API
      - "9090:9090"   # gRPC API
      - "9091:9091"   # Prometheus metrics
    volumes:
      - .:/app
      - go_mod_cache:/go/pkg/mod
    networks:
      - gdc-network
    depends_on:
      ydb:
        condition: service_healthy
      nats:
        condition: service_healthy
      prometheus:
        condition: service_healthy
    restart: unless-stopped

volumes:
  ydb_data:
    driver: local
  ydb_logs:
    driver: local
  nats_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local
  go_mod_cache:
    driver: local

networks:
  gdc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16