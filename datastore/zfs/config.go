package zfs

import (
	"encoding/json"
	"errors"
	"path/filepath"

	"dario.cat/mergo"
	"github.com/ipfs-cluster/ipfs-cluster/config"
	"github.com/kelseyhightower/envconfig"
)

const configKey = "zfs"
const envConfigKey = "cluster_zfs"

// Default values for ZFS Config
const (
	DefaultSubFolder    = "zfs"
	DefaultPoolName     = "ipfs-cluster"
	DefaultCompression  = "lz4"
	DefaultRecordSize   = "128K"
	DefaultDeduplication = true
	DefaultSync         = "standard"
	DefaultATime        = false
)

// Config is used to initialize a ZFS datastore. It implements the
// ComponentConfig interface.
type Config struct {
	config.Saver

	// The folder for this datastore. Non-absolute paths are relative to
	// the base configuration folder.
	Folder string `json:"folder,omitempty"`

	// ZFS pool name to use for datasets
	PoolName string `json:"pool_name,omitempty"`

	// ZFS dataset name for storing data
	DatasetName string `json:"dataset_name,omitempty"`

	// ZFS compression algorithm (lz4, gzip, zstd, off)
	Compression string `json:"compression,omitempty"`

	// ZFS record size for optimal performance
	RecordSize string `json:"recordsize,omitempty"`

	// Enable ZFS deduplication
	Deduplication bool `json:"deduplication"`

	// ZFS sync mode (standard, always, disabled)
	Sync string `json:"sync,omitempty"`

	// Enable access time updates
	ATime bool `json:"atime"`

	// Enable ZFS encryption
	Encryption bool `json:"encryption"`

	// Encryption key format (raw, hex, passphrase)
	KeyFormat string `json:"key_format,omitempty"`

	// Maximum number of pins per shard before creating new dataset
	MaxPinsPerShard int64 `json:"max_pins_per_shard,omitempty"`

	// Enable automatic dataset optimization
	AutoOptimize bool `json:"auto_optimize"`

	// Snapshot interval in seconds (0 to disable)
	SnapshotInterval int `json:"snapshot_interval,omitempty"`

	// Maximum number of snapshots to retain
	MaxSnapshots int `json:"max_snapshots,omitempty"`
}

// ConfigKey returns a human-friendly identifier for this type of Datastore.
func (cfg *Config) ConfigKey() string {
	return configKey
}

// Default initializes this Config with sensible values.
func (cfg *Config) Default() error {
	cfg.Folder = DefaultSubFolder
	cfg.PoolName = DefaultPoolName
	cfg.DatasetName = "ipfs-cluster/datastore"
	cfg.Compression = DefaultCompression
	cfg.RecordSize = DefaultRecordSize
	cfg.Deduplication = DefaultDeduplication
	cfg.Sync = DefaultSync
	cfg.ATime = DefaultATime
	cfg.Encryption = false
	cfg.KeyFormat = "raw"
	cfg.MaxPinsPerShard = 1000000000 // 1 billion pins per shard
	cfg.AutoOptimize = true
	cfg.SnapshotInterval = 3600 // 1 hour
	cfg.MaxSnapshots = 24       // Keep 24 snapshots (1 day)
	return nil
}

// ApplyEnvVars fills in any Config fields found as environment variables.
func (cfg *Config) ApplyEnvVars() error {
	return envconfig.Process(envConfigKey, cfg)
}

// Validate checks that the fields of this Config have working values,
// at least in appearance.
func (cfg *Config) Validate() error {
	if cfg.Folder == "" {
		return errors.New("folder is unset")
	}

	if cfg.PoolName == "" {
		return errors.New("pool_name is unset")
	}

	if cfg.DatasetName == "" {
		return errors.New("dataset_name is unset")
	}

	// Validate compression algorithm
	validCompression := map[string]bool{
		"off":  true,
		"lz4":  true,
		"gzip": true,
		"zstd": true,
	}
	if !validCompression[cfg.Compression] {
		return errors.New("invalid compression algorithm")
	}

	// Validate sync mode
	validSync := map[string]bool{
		"standard": true,
		"always":   true,
		"disabled": true,
	}
	if !validSync[cfg.Sync] {
		return errors.New("invalid sync mode")
	}

	if cfg.MaxPinsPerShard <= 0 {
		return errors.New("max_pins_per_shard must be positive")
	}

	return nil
}

// LoadJSON reads the fields of this Config from a JSON byteslice as
// generated by ToJSON.
func (cfg *Config) LoadJSON(raw []byte) error {
	jcfg := &Config{}
	err := json.Unmarshal(raw, jcfg)
	if err != nil {
		return err
	}

	cfg.Default()

	return mergo.Merge(cfg, jcfg, mergo.WithOverride)
}

// ToJSON generates a JSON-formatted human-friendly representation of this
// Config.
func (cfg *Config) ToJSON() (raw []byte, err error) {
	return config.DefaultJSONMarshal(cfg)
}

// GetFolder returns the ZFS datastore folder.
func (cfg *Config) GetFolder() string {
	if filepath.IsAbs(cfg.Folder) {
		return cfg.Folder
	}

	return filepath.Join(cfg.BaseDir, cfg.Folder)
}

// GetDatasetPath returns the full ZFS dataset path.
func (cfg *Config) GetDatasetPath() string {
	return cfg.PoolName + "/" + cfg.DatasetName
}

// ToDisplayJSON returns JSON config as a string.
func (cfg *Config) ToDisplayJSON() ([]byte, error) {
	return config.DisplayJSON(cfg)
}